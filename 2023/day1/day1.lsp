(require :uiop)

(defvar numbers-list (list
		      (cons "1" "1")
		      (cons "one" "1")
		      (cons "2" "2")
		      (cons "two" "2")
		      (cons "3" "3")
		      (cons "three" "3")
		      (cons "4" "4")
		      (cons "four" "4")
		      (cons "5" "5")
		      (cons "five" "5")
		      (cons "6" "6")
		      (cons "six" "6")
		      (cons "7" "7")
		      (cons "seven" "7")
		      (cons "8" "8")
		      (cons "eight" "8")
		      (cons "9" "9")
		      (cons "nine" "9")))

(defun part-one (file)
  (reduce #'(lambda (acc line)
	   (+ (get-number line) acc))
	  (uiop:read-file-lines file)
	  :initial-value 0))

(defun get-number (line)
  (parse-integer (concatenate 'string
	       (string (find-if #'digit-char-p line))
	       (string (find-if #'digit-char-p line :from-end t)))))

(defun map-number (line)
  (remove-if-not #'(lambda (x)
		     (car x))
		 (mapcar #'(lambda (x)
		  (cons (search x line ) x))
		  numbers-list)))
